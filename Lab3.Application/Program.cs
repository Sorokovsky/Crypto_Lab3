/*using System.Text;
using Lab3.Core.Encryptions.RSA;

const string input = "Hello, my world";
Console.WriteLine("Input: " + input);

var encryption = new RsaEncryption();
var (encryptKey, decryptKey) = encryption.GenerateKeys();

// Encrypt
var encryptedBytes = encryption.Encrypt(Encoding.UTF8.GetBytes(input), encryptKey);
var encryptedBase64 = Convert.ToBase64String(encryptedBytes);
Console.WriteLine("Encrypted: " + encryptedBase64);

// Decrypt
var decryptedBytes = encryption.Decrypt(Convert.FromBase64String(encryptedBase64), decryptKey);
var decryptedText = Encoding.UTF8.GetString(decryptedBytes);
Console.WriteLine("===========================================");
Console.WriteLine("Decrypted: " + decryptedText);
Console.WriteLine("End");*/

using System.Numerics;
using Lab3.Core.EleptycCurves;

var p =
        BigInteger.Parse("57896044618658097711785492504343953926634992332820282019728792003956564821041")
    ;
var a = BigInteger.Parse("7");
var b =
        BigInteger.Parse("43308876546767276905765904595650931995942111794451039583252968842033849580414")
    ;
var n =
        BigInteger.Parse("57896044618658097711785492504343953927082934583725450622380973592137631069619")
    ;
var q =
        BigInteger.Parse("57896044618658097711785492504343953927082934583725450622380973592137631069619")
    ;
var P = new Point();
P.X = BigInteger.Parse("2");
P.Y =
    BigInteger.Parse("4018974056539037503335449422937059775635739389905545080690979365213431566280");
P.A = a;
P.Y = b;
P.FieldChar = p;
var d =
        BigInteger.Parse("55441196065363246126355624130324183196576709222340016572108097750006097525544")
    ;
var Q = new Point();
Q = Point.Multiply(d, P);
//Q.x=57520216126176808443631405023338071176630104906313632182896741342206604859403
//Q.y=17614944419213781543809391949654080031942662045363639260709847859438286763994
var e =
        BigInteger.Parse("20798893674476452017134061561508270130637142515379653289952617252661468872421")
    ;
var k =
        BigInteger.Parse("53854137677348463731403841147996619241504003434302020712960838528893196233395")
    ;
var C = new Point();
C = Point.Multiply(k, P);
//C.x=29700980915817952874371204983938256990422752107994319651632687982059210933395
//C.y=32842535278684663477094665322517084506804721032454543268132854556539274060910
BigInteger r, s;
r = C.X % q;
//r=29700980915817952874371204983938256990422752107994319651632687982059210933395
s = (r * d + k * e) % q;
//s = 574973400270084654178925310019147038455227042649098563933718999175515839552
//Процес перевірки цифрового підпису
BigInteger v, z1, z2;
v = Point.ModInverse(e, q);
//v=17686683605934468677301713824900268562746883080675496715288036572431145718978
z1 = s * v % q;
z2 = r * v % q;
z2 = q - z2;
//z1=37699167500901938556841057293512656108841345190491942619304532412743720999759
//z2=1417199842734347211251591796950076576924665583897286211449993265333367109221
var p1 = new Point();
var p2 = new Point();
p1 = Point.Multiply(z1, P);
p2 = Point.Multiply(z2, Q);
C = p1 + p2;
BigInteger R;
R = C.X % q;
//R=29700980915817952874371204983938256990422752107994319651632687982059210933395
Console.ReadLine();